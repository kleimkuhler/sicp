#lang racket

(require compatibility/mlist)

;; 3.22
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (not (empty-queue?))
          (mcar front-ptr)
          (error ("FRONT-QUEUE: Called with empty queue" front-ptr))))
    (define (insert-queue! item)
      (let ((new-pair (mcons item '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-mcdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))
        front-ptr))
    (define (delete-queue!)
      (cond ((not (empty-queue?))
             (set! front-ptr (mcdr front-ptr))
             front-ptr)
            (else
             (error ("DELETE-QUEUE: Called with empty queue" front-ptr)))))
    (define (print-queue)
      (define (iter queue result)
        (if (null? queue)
            (reverse result)
            (iter (mcdr queue) (cons (mcar queue) result))))
      (iter front-ptr '()))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'print-queue) print-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            (else (error ("MAKE-QUEUE: Unknown request" m)))))
    dispatch))

;; 3.23
(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-deque?) (null? front-ptr))
    (define (front-deque)
      (if (not (empty-deque?))
          (mcar front-ptr)
          (error ("FRONT-DEQUE: Called with empty deque" front-ptr))))
    (define (rear-deque)
      (if (not (empty-deque?))
          (mcar rear-ptr)
          (error ("REAR-DEQUE: Called with empty deque" front-ptr))))
    (define (front-insert-deque!)
      #t)
    (define (rear-insert-deque!)
      #t)
    (define (front-delete-deque!)
      #t)
    (define (rear-delete-deque!)
      #t)
    (define (print-deque)
      #t)
    (define (dispatch m)
      (cond ((eq? m 'empty-deque?) empty-deque?)
            ((eq? m 'front-deque) front-deque)
            ((eq? m 'rear-deque) rear-deque)
            ((eq? m 'front-insert-deque!) front-insert-deque!)
            ((eq? m 'rear-insert-deque!) rear-insert-deque!)
            ((eq? m 'front-delete-deque!) front-delete-deque!)
            ((eq? m 'rear-delete-deque!) rear-delete-deque!)
            ((eq? m 'print-deque) print-deque)
            (else (error ("MAKE-DEQUE: Unknown request" m)))))
    dispatch))
